<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Tscon未授权登陆远程桌面]]></title>
      <url>/20190408/tscon%E6%9C%AA%E6%8E%88%E6%9D%83%E7%99%BB%E9%99%86%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2.html</url>
      <content type="html"><![CDATA[<p>运用 <code>tscon</code> 该特性可以达到某些<strong>横向移动</strong>的场景，达成未授权登陆其它用户的远程桌面会话，或者使用该特性切换到其它用户进行恶意行为，那么事件日志里面记录的是其它用户的操作，从而避免或者恶意引导应急响应人员的取证。</p>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文章更多的是为了解这个姿势，实际攻击中需要结合利用。</p>
<p>这种方法前提是取得某部主机的 SYSTEM 权限，特点是</p>
<ul>
<li>不需要其它工具</li>
<li>不需要写入任何文件</li>
<li>可以连接到断开连接、没有正确退出的远程桌面 session</li>
</ul>
<p>影响范围：<br>win 2000 之后一直至今的 windows 系统都可以使用该方法</p>
<h2 id="用到的工具"><a href="#用到的工具" class="headerlink" title="用到的工具"></a>用到的工具</h2><p>无，仅需要开启远程桌面</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote>
<p>文章部分内容引用了先知社区文章 <a href="https://xz.aliyun.com/t/1987" target="_blank" rel="noopener">https://xz.aliyun.com/t/1987</a></p>
</blockquote>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="RDP是什么"><a href="#RDP是什么" class="headerlink" title="RDP是什么"></a>RDP是什么</h4><p>远程桌面协议（RDP）是微软开发的专有协议，它为用户提供通过网络连接连接到另一台计算机的图形界面。用户使用RDP客户端，而另一台计算机必须运行RDP服务器。</p>
<p>每个试图连接到另一台计算机的人，主要使用远程桌面服务或终端服务进行连接。如果您使用此服务，那么您已经知道远程桌面服务具有以下功能：如果您知道其密码，则可以连接到其他用户的会话。</p>
<p>这是我们常说的 3389/远程桌面。</p>
<h4 id="TSCON是什么"><a href="#TSCON是什么" class="headerlink" title="TSCON是什么"></a>TSCON是什么</h4><p>Tscon 是一个 Windows 的功能，可连接到远程桌面会话主机服务器上的另一个会话。</p>
<pre><code>tscon {&lt;SessionID&gt; | &lt;SessionName&gt;} [/dest:&lt;SessionName&gt;] [/password:&lt;pw&gt; | /password:*] [/v]
</code></pre><h4 id="System权限"><a href="#System权限" class="headerlink" title="System权限"></a>System权限</h4><p>System权限是比Administrator权限还高的系统最高权限，利用它可以完成很多常规情况下无法完成的任务。</p>
<hr>
<h3 id="tscon的正常用法"><a href="#tscon的正常用法" class="headerlink" title="tscon的正常用法"></a>tscon的正常用法</h3><p>测试系统： Windows Server 2008 x86</p>
<p>已创建三个用户： Administrator user1 test1</p>
<p>密码均为 <strong>test1234</strong></p>
<p>远程桌面需要设置为第二项：</p>
<p><img src="https://i.loli.net/2019/03/23/5c958d1f22bed.jpg" alt></p>
<p><strong>步骤1</strong> 开启了远程桌面的 Windows 系统，用户 Administrator 为本地登录，用户 test1 为通过远程桌面服务(RDP)连接 3389 端口远程登录，会产生多个会话如下</p>
<p><img src="https://i.loli.net/2019/03/23/5c95ec32a049c.jpg" alt></p>
<p><strong>步骤2</strong> 接下来，如果用户Administrator想 要切换至用户b的远程桌面，可通过右键-连接进行连接，接着输入密码即可，如下图：</p>
<p><img src="https://i.loli.net/2019/03/23/5c95ec4c33dde.jpg" alt><br><img src="https://i.loli.net/2019/03/23/5c95ec6a1640a.jpg" alt></p>
<p><strong>步骤3</strong> 来到我们的 tscon ，它是命令行下使用的工具，可实现和上述相同的功能。首先获取用户对应的 sessionid，执行如下命令：</p>
<pre><code>query user
</code></pre><p><img src="https://i.loli.net/2019/03/23/5c95ecb3a6004.jpg" alt></p>
<p><strong>步骤4</strong> 接着在 Administrator 用户命令行下运行 tscon 命令，上个命令查到 test 的会话 ID 为 2，输入 ID 和密码后：</p>
<pre><code>tscon 2 /PASSWORD:test1234
</code></pre><p><img src="https://i.loli.net/2019/03/23/5c95ecdce3344.jpg" alt></p>
<p>你会发现你直接切换到了 test 用户的会话，这是 <code>tscon</code> 命令的正常用法。</p>
<hr>
<h3 id="利用tscon实现未授权登录远程桌面的方法"><a href="#利用tscon实现未授权登录远程桌面的方法" class="headerlink" title="利用tscon实现未授权登录远程桌面的方法"></a>利用tscon实现未授权登录远程桌面的方法</h3><p>如果你拥有了 System 权限，在 System 权限下执行同样的命令，就能够绕过输入密码的过程，直接切换。</p>
<p>从 Administrator 权限切换到 System 权限的方法在大佬的文章<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E4%BB%8EAdmin%E6%9D%83%E9%99%90%E5%88%87%E6%8D%A2%E5%88%B0System%E6%9D%83%E9%99%90/" target="_blank" rel="noopener">渗透技巧——从Admin权限切换到System权限</a>有过详细介绍，常用方法有如下四种：</p>
<ul>
<li>通过创建服务获得System权限</li>
<li>利用 MSIExec 获得System权限</li>
<li>利用 token 复制获得System权限</li>
<li>各种提权漏洞</li>
</ul>
<h4 id="攻击场景1"><a href="#攻击场景1" class="headerlink" title="攻击场景1"></a>攻击场景1</h4><p>在渗透 Windows Server 的时候，默认情况下 mimikatz 无法导出明文口令，测试环境下，通过某些方法获得了服务器的一个用户名密码，可以通过远程桌面进行登录。如果登录后发现后台存在另一用户，由于未导出明文口令，通过常规方法无法切换至另一用户的桌面，这里就可以借助上文提到的方法，先提权至 System 权限，再切换过去。</p>
<p>值得注意的是，如果当用户通过远程桌面登录后，直接<strong>点击关闭</strong>断开连接却没有注销，此时该会话并没有结束，后台显示Disconnected，如下图：</p>
<p><img src="https://i.loli.net/2019/03/23/5c95ed8f4dd1b.jpg" alt></p>
<p>此时，仍能在 system 权限下通过 tscon 实现未授权连接。因此在平时的渗透中，可以利用这一点来获取 disconnected 用户会话的远程桌面。</p>
<p>这里利用 <a href="https://github.com/alpha1ab/CVE-2018-8120/tree/master/CVE-2018-8120" target="_blank" rel="noopener">CVE-2018-8120</a> 进行提权，提权 exe 已放到用户 user1 的桌面上。执行 <code>tscon 2</code> 即可<strong>无需密码</strong>顺利切换到 test1 用户的远程桌面。</p>
<p><img src="https://i.loli.net/2019/03/23/5c95edef99b0b.jpg" alt></p>
<h4 id="攻击场景2"><a href="#攻击场景2" class="headerlink" title="攻击场景2"></a>攻击场景2</h4><p>假设你已经成功得到了 user1 这个用户的用户名密码，入侵到了一台 Windows Server 2008 主机，即我们的靶机，这个时候要提权到 System 权限有多种姿势，这里利用 <a href="https://github.com/alpha1ab/CVE-2018-8120/tree/master/CVE-2018-8120" target="_blank" rel="noopener">CVE-2018-8120</a> 进行提权，提权 exe 已放到用户 user1 的桌面上</p>
<p><img src="https://i.loli.net/2019/03/23/5c95e0ab5c7c2.jpg" alt></p>
<p>得到 System 权限后，可以利用辅助工具（快捷键为 Win+U）给主机装个后门，命令如下（命令已放到 user1 桌面）：</p>
<pre><code>REG ADD &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\utilman.exe&quot; /t REG_SZ /v Debugger /d &quot;C:\windows\system32\cmd.exe&quot; /f
</code></pre><p><img src="https://i.loli.net/2019/03/23/5c95f000c87bb.jpg" alt></p>
<p>这时我们可以利用后门绕过登陆界面。锁定 user 1 用户回到登陆界面，可以点击轻松访问图标（或者快捷键 Win + U）对其调用，在登录界面启动辅助工具管理器，弹出 cmd.exe，权限为 system</p>
<p><img src="https://i.loli.net/2019/03/23/5c95f0c03b34b.jpg" alt></p>
<p>这时通过 <code>tscon 1</code> 可<strong>无需密码</strong>直接切换至目标用户的桌面，大功告成。如果受限的话可以利用 WMI 做中转，具体可以看先知社区的利用<a href="http://www.mottoin.com/tech/110211.html" target="_blank" rel="noopener">文章</a></p>
<p>删除后门，使用 SYSTEM 权限执行命令：</p>
<pre><code>REG DELETE &quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\utilman.exe&quot;
</code></pre><hr>
<h3 id="其它应用场景"><a href="#其它应用场景" class="headerlink" title="其它应用场景"></a>其它应用场景</h3><ul>
<li>劫持系统上较旧的管理员会话。</li>
<li>此技术还可用于解锁锁定的会话。</li>
<li>IT管理员可以劫持业务用户的会话以访问组织中的敏感系统。</li>
<li>某个管理员可以通过劫持他的会话和执行未经授权的活动来暗中访问某些系统的其他管理员。</li>
</ul>
<p>最重要的是，对于上述场景，攻击者不需要 Metasploit，mimikatz 等工具，这些工具通常用于用户的令牌操作和模拟登录用户。我们只要用到 tscon 这个内置命令就好了。每个管理员都可以通过物理访问本地模拟任何登录用户，也可以通过远程桌面远程模拟任何登录用户。</p>
<hr>
<h3 id="利用工具"><a href="#利用工具" class="headerlink" title="利用工具"></a>利用工具</h3><ol>
<li>Github 上有一个 <a href="https://github.com/crazywifi/RDP_SessionHijacking" target="_blank" rel="noopener">批处理攻击脚本</a></li>
<li><a href="https://github.com/gentilkiwi/mimikatz/releases" target="_blank" rel="noopener">Mimikatz</a> 有一个模块也已经集成了这个漏洞，直接利用即可</li>
</ol>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*oFF3A3KhTzGrEnS_3vV36g.gif" alt></p>
<hr>
<h3 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h3><ol>
<li>组策略：建议在用户断开连接后立即或快速使用组策略注销断开连接的会话。</li>
<li>在退出远程桌面的时候先注销，不要直接点关闭。</li>
<li>不要将RDS / RDP暴露给互联网：如果一定要这样做，则必须实施多因素身份验证。</li>
<li>打开事件日志、事件转发等功能。</li>
<li>不要滥用 SYSTEM 权限。</li>
</ol>
<hr>
<h2 id="靶机搭建记录"><a href="#靶机搭建记录" class="headerlink" title="靶机搭建记录"></a>靶机搭建记录</h2><p>找个可以远程登陆的WIN 7精简版</p>
<ol>
<li><a href="https://blog.csdn.net/csnewdn/article/details/53780634" target="_blank" rel="noopener">开启防火墙和配置远程桌面</a></li>
<li>创建测试账户并配置远程桌面权限</li>
<li>开启多个用户同时登陆：gpedit.msc–&gt;计算机配置—&gt;管理模板—&gt;Windows组件—&gt;远程桌面服务—&gt;远程桌面会话主机—&gt;连接—&gt;限制连接的数量。如果是 Windows Server 版本的话默认为 3，无需设置。</li>
<li>UniversalTermsrvPatch 破解dll配置可多人登陆</li>
</ol>
<p>发现精简版把轻松访问都删了没法演示后门，因此找了完整版server08 32位来演示，靶机有点大，启动可能有点慢。</p>
]]></content>
      
        <categories>
            
            <category> 内网渗透 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 远程桌面 </tag>
            
            <tag> 内网渗透 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[啥是CTF？新手如何入门CTF？]]></title>
      <url>/20190407/%E5%95%A5%E6%98%AFCTF%EF%BC%9F%E6%96%B0%E6%89%8B%E5%A6%82%E4%BD%95%E5%85%A5%E9%97%A8CTF%EF%BC%9F.html</url>
      <content type="html"><![CDATA[<p>CTF 科普 + CTF 新手入门小指南。</p>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-06aa5eb8946e1657?imageMogr2/auto-orient/strip%7CimageView2/2/w/650/format/webp" alt></p>
<blockquote>
<p>原文请查看公众号 <strong>NeverSec</strong> ，格式更丰富，阅读体验更好哦！</p>
</blockquote>
<h2 id="CTF是啥"><a href="#CTF是啥" class="headerlink" title="CTF是啥"></a>CTF是啥</h2><p>CTF 是 Capture The Flag 的简称，中文咱们叫<strong>夺旗赛</strong>，其本意是西方的一种传统运动。在比赛上两军会互相争夺旗帜，当有一方的旗帜已被敌军夺取，就代表了那一方的战败。在信息安全领域的 CTF 是说，通过各种<strong>攻击手法</strong>，获取服务器后寻找指定的<strong>字段</strong>，或者文件中某一个固定格式的字段，这个字段叫做 flag，其形式一般为 <strong>flag{xxxxxxxx}</strong>，提交到裁判机就可以得分。</p>
<p>信息安全的 CTF 的历史可以说很长了，最早起源于 96 年的 <strong>DEFCON</strong> 全球黑客大会（美国最大的网络安全会议，今年 5 月在北京举行哦，有兴趣可以去听听，特别好玩）。</p>
<h2 id="为啥要CTF"><a href="#为啥要CTF" class="headerlink" title="为啥要CTF"></a>为啥要CTF</h2><p>入门渗透，那肯定得各种练手对不对？但因为由于 「网络安全法」的颁布，随意扫描他人网站，或非授权渗透测试都有一定的风险。最近也有个新闻：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-f59132df5a217e03?imageMogr2/auto-orient/strip%7CimageView2/2/w/430/format/webp" alt></p>
<p>说实话，这小伙只是在扫描，攻击都被防火墙拦下了，啥都没弄到，结果还是一样被判刑，可谓是偷鸡不成蚀把米了……</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-75863ff7a0593e05?imageMogr2/auto-orient/strip%7CimageView2/2/w/268/format/webp" alt></p>
<p>所以记住千万<strong>不要乱扫</strong>国内的网站，尤其是教育、政府类网站。但初入门的同学学习渗透测试没有一个对应的环境也是不行的，而常见的靶机对于小白来说太过复杂，很容易不知如何下手。</p>
<p>这个时候 CTF 就非常适合了，CTF 一般是一个题目有一个或几个知识点相互糅合，相对来说目标性比较强。如果想要体会到安全的成就感和趣味性，促进自己边练边学，CTF 就是一个很好的选择。</p>
<h2 id="CTF-的类型"><a href="#CTF-的类型" class="headerlink" title="CTF 的类型"></a>CTF 的类型</h2><p>CTF 题目类型一般分为 Web 渗透、RE 逆向、Misc 杂项、PWN 二进制漏洞利用、Crypto 密码破译，有志于渗透测试的同学一开始建议从 Web 渗透的题目开始，辅以 Misc 杂项和 Crypto 密码学。</p>
<p>CTF 主要分为两种模式，一是<strong>解题模式</strong>。对于 Web 安全来说，会要求你入侵网站或者靶机，攻击成功后系统会显示flag或者在某个目录 文件 数据库寻找 Flag，提交到答题系统得分。逆向工程题目一般形式是破解注册机、动态调试、dump 内存等等。这些题目可以百度或谷歌别人的解题报告（ 关键字：CTF writeup）来认识一下。</p>
<p>这种模式的缺点是类似于“应试教育”，当前的趋势是注重出题难、出题偏，没有考虑实际，就跟奥数似的。而且这种模式只有攻击，却没有防守，而在企业中工作更多的还是考虑如何防护的问题，这个时候 AWD 攻防赛模式就应运而生了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-bf646749a49b4526?imageMogr2/auto-orient/strip%7CimageView2/2/w/296/format/webp" alt></p>
<p>二是<strong>攻防赛</strong>，也叫 AWD(Attack With Defense，攻防兼备)模式。你需要在一场比赛里要扮演攻击方和防守方，攻者得分，失守者会被扣分。也就是说，攻击别人的靶机可以获取 Flag 分数时，别人会被扣分，同时你也要保护自己的主机不被别人得分，以防扣分。</p>
<p>这种模式非常激烈，准备要非常充分，手上要有充足的防守方案和 EXP 攻击脚本。我第一次参加这种比赛的时候就被人打惨了QWQ，不过后面参赛越多，积累的经验就会越多。所以说，这种比赛不用慌，多打多学多积累就好了。</p>
<p>CTF 里面也有一血之说，谁第一个交 Flag 能获得分数加成，所以说手快也很重要。<del>不过一般来说是没有别的大佬手快的。</del></p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-288e4049b55e90dd?imageMogr2/auto-orient/strip%7CimageView2/2/w/429/format/webp" alt></p>
<p>至于每个类型有什么题目，你可以去参加一个 CTF 赛事，打了一次之后你就会有所了解了。</p>
<h2 id="CTF-和现实渗透的对比"><a href="#CTF-和现实渗透的对比" class="headerlink" title="CTF 和现实渗透的对比"></a>CTF 和现实渗透的对比</h2><p>现实的渗透测试会有非常完整的流程，从信息收集、漏洞探测开始，再逐项攻击，很多时候会一无所获。相比之下，CTF 的目标会比较<strong>明确</strong>，中等难度以下的题目一般都会在题目描述中提示漏洞的发生处，没有提示的话检测点也不会很多，一个个筛查就可以了。</p>
<p>其次，有很多 CTF 题目会有点脱离现实渗透，套路、脑洞比较多，有的知识点并不实用……怎么说呢？</p>
<p>有的时候出题人为了出点新题会把题目设置得脑洞要特别大才能做出来，Misc 安全杂项更是这种题的重灾区。做这种题其实对现实渗透没啥帮助，比如说这道密码题，第一次见的时候头大得一笔，各位看官先猜猜看是啥：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-a447dda4dc724637?imageMogr2/auto-orient/strip%7CimageView2/2/w/402/format/webp" alt></p>
<p>做多了 CTF 的同学应该知道，这是「与佛论禅」密码加密，也不知道是谁想出来的……</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-20b19f538fd1af6a?imageMogr2/auto-orient/strip%7CimageView2/2/w/471/format/webp" alt></p>
<p>类似这种摸不着头脑、要用特别奇怪的姿势或套路做题的题目也屡见不鲜。其实这也一定程度偏离了 CTF 的初衷，我们是要提高自己的<strong>安全姿势水平</strong>，而不是大开脑洞。</p>
<p>因此较为简单、脑洞略大的 CTF 题仅作扩充知识面就好了。话虽如此，现在 CTF 大赛都已经往<strong>实战</strong>的方向走了，高水准的 CTF 题目很多都会模拟真实的网站，让你更加有真实渗透的代入感，渗透手法也更加贴近实战。国内比较良心的 CTF 有 DDCTF、安恒杯月赛 CTF 等等。</p>
<p>关于 CTF 赛事的信息可以关注 XCTF 社区或 CTFtime 整理的赛事链接，详请看下方链接。虽然非常<del>可能</del>在比赛里打不过各位大佬，但是划划水，学习学习知识也是非常不错滴。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-d3025e441db896b0?imageMogr2/auto-orient/strip%7CimageView2/2/w/184/format/webp" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我搜集了一些入门比较可以的 CTF 靶场，想了想，把集合文章放到自己废弃已久的博客上，以后会在博客更新技术文章，这个公众号依然不讲啥技术，说点儿硬硬的经验干货就好了。靶场集合点击下方： 为了防吞，也可以复制链接到浏览器查看：</p>
<p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fneversec.top%2F20190404%2F%25E6%2596%25B0%25E6%2589%258B%25E5%258F%258B%25E5%25A5%25BD%25E7%259A%2584CTF%25E9%259D%25B6%25E5%259C%25BA%25E6%2595%25B4%25E7%2590%2586%25E5%2590%2588%25E9%259B%2586.html" target="_blank" rel="noopener">新手友好的CTF靶场整理合集-NeverSec的博客</a></p>
<p>新手入门的话，在靶场慢慢刷题，对于不会的题目直接百度或者谷歌，都会有很多解题报告，遇到不会的知识点也要善于使用搜索引擎。最好的方法还是加入一个 CTF 小组，大家互相帮助，提高得会更加快。有什么方面需要我说得更加详细的，欢迎留言或者发消息。</p>
<p>最近事情比较多，有点突发状况，文章难产了好久……对各位说声不好意思。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-4864cb94f0e38b10?imageMogr2/auto-orient/strip%7CimageView2/2/w/228/format/webp" alt></p>
<p>清明小长假归来，新的一周，继续开干！</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-8ecc0e2dd79b73f0?imageMogr2/auto-orient/strip%7CimageView2/2/w/255/format/webp" alt></p>
<p><img src="https://upload-images.jianshu.io/upload_images/5814060-0d32a11d6e6013de?imageMogr2/auto-orient/strip%7CimageView2/2/w/420/format/webp" alt></p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新手友好的CTF靶场整理合集]]></title>
      <url>/20190404/%E6%96%B0%E6%89%8B%E5%8F%8B%E5%A5%BD%E7%9A%84CTF%E9%9D%B6%E5%9C%BA%E6%95%B4%E7%90%86%E5%90%88%E9%9B%86.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我整理得没有那么全，这里的合集主要还是面对新手。做题贵精不在多，好好练习每一题，学习每个知识点，不懂的百度或者 Google 即可。记住，你是为了提高自己而去打 CTF 。<br><a id="more"></a></p>
<h2 id="CTF-比赛时间表"><a href="#CTF-比赛时间表" class="headerlink" title="CTF 比赛时间表"></a>CTF 比赛时间表</h2><ul>
<li>CTFwiki（入门必看wiki）: <a href="https://ctf-wiki.github.io/ctf-wiki/#/introduction" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/#/introduction</a></li>
<li>XCTF社区： <a href="https://time.xctf.org.cn" target="_blank" rel="noopener">https://time.xctf.org.cn</a></li>
<li>i春秋: <a href="https://www.ichunqiu.com/competition" target="_blank" rel="noopener">https://www.ichunqiu.com/competition</a></li>
<li>CTFrank: <a href="https://ctfrank.org/" target="_blank" rel="noopener">https://ctfrank.org/</a></li>
<li>CTFtime（基本都是国外的）: <a href="https://ctftime.org" target="_blank" rel="noopener">https://ctftime.org</a> </li>
</ul>
<h2 id="本地靶场"><a href="#本地靶场" class="headerlink" title="本地靶场"></a>本地靶场</h2><ul>
<li>SQLi: <a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a></li>
<li>DVWA: <a href="https://github.com/ethicalhack3r/DVWA" target="_blank" rel="noopener">https://github.com/ethicalhack3r/DVWA</a></li>
<li>metsploitable3: <a href="https://github.com/rapid7/metasploitable3/" target="_blank" rel="noopener">https://github.com/rapid7/metasploitable3/</a></li>
<li>Webgoat: <a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat</a></li>
<li>Juiceshop: <a href="https://github.com/bkimminich/juice-shop" target="_blank" rel="noopener">https://github.com/bkimminich/juice-shop</a></li>
</ul>
<h2 id="国内-CTF"><a href="#国内-CTF" class="headerlink" title="国内 CTF"></a>国内 CTF</h2><ul>
<li>实验吧: <a href="http://www.shiyanbar.com" target="_blank" rel="noopener">http://www.shiyanbar.com</a></li>
<li>XCTF 实训平台: <a href="http://oj.xctf.org.cn" target="_blank" rel="noopener">http://oj.xctf.org.cn</a></li>
<li>安恒周周练： <a href="https://www.linkedbyx.com/home" target="_blank" rel="noopener">https://www.linkedbyx.com/home</a></li>
<li>XSS专练： <a href="https://xss.haozi.me/tools/xss-encode/" target="_blank" rel="noopener">https://xss.haozi.me/tools/xss-encode/</a></li>
<li>南京邮电大学CTF/网络攻防训练平台: <a href="http://ctf.nuptzj.cn/" target="_blank" rel="noopener">http://ctf.nuptzj.cn/</a></li>
<li>BugkuCTF: <a href="https://ctf.bugku.com/" target="_blank" rel="noopener">https://ctf.bugku.com/</a></li>
</ul>
<h2 id="国外-CTF"><a href="#国外-CTF" class="headerlink" title="国外 CTF"></a>国外 CTF</h2><ul>
<li>Root-me: <a href="https://root-me.org" target="_blank" rel="noopener">https://root-me.org</a></li>
<li>CTF365: <a href="https://ctf365.com/" target="_blank" rel="noopener">https://ctf365.com/</a></li>
</ul>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><ul>
<li>Vulhub: <a href="https://github.com/vulhub/vulhub" target="_blank" rel="noopener">https://github.com/vulhub/vulhub</a></li>
</ul>
<h2 id="其它大佬整理的链接"><a href="#其它大佬整理的链接" class="headerlink" title="其它大佬整理的链接"></a>其它大佬整理的链接</h2><p>多搜搜，很多前辈已经整理了很多啦！</p>
<ul>
<li><p>Awesome-Platforms/CTF-Platforms: <a href="https://github.com/We5ter/Awesome-Platforms/blob/master/CTF-Platforms.md" target="_blank" rel="noopener">https://github.com/We5ter/Awesome-Platforms/blob/master/CTF-Platforms.md</a></p>
</li>
<li><p>知乎提问： <a href="https://www.zhihu.com/question/267204109/answer/320502511" target="_blank" rel="noopener">https://www.zhihu.com/question/267204109/answer/320502511</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gitpages绑定域名及启用HTTPS]]></title>
      <url>/20180224/Gitpages%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%8F%8A%E5%90%AF%E7%94%A8HTTPS.html</url>
      <content type="html"><![CDATA[<p>为了不使用看起来就很长的、B格不够高的<a href>*.github.io</a>作为博客地址，我购买了一个域名(<a href="n3ver.top">n3ver.top</a>)，将<a href="blog.n3ver.top">blog.n3ver.top</a>绑定到我的Github Pages上，并且使用了HTTPS。接下来是我的做法：<br><a id="more"></a></p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><ol>
<li>域名从阿里云下的万网处购买，在域名管理中点击解析-添加解析</li>
<li>具体设置如图所示，因为我使用子域名作为博客地址，因此此处选择CNAME作为记录类型<br><img src="../../images/201802241345_432.png" alt></li>
<li><p>在Github Pages中的source目录中添加CNAME文件，填入域名；更新设置。</p>
<pre><code class="bash"> touch CNAME
 vim CNAME

 blog.n3ver.top
 :q

 hexo g
 hexo d
</code></pre>
</li>
<li>等待5分钟即可生效</li>
</ol>
<h3 id="启用HTTPS"><a href="#启用HTTPS" class="headerlink" title="启用HTTPS"></a>启用HTTPS</h3><h4 id="为什么使用SSL"><a href="#为什么使用SSL" class="headerlink" title="为什么使用SSL"></a>为什么使用SSL</h4><ol>
<li>SSL是大势所趋，Chrome即将把所有HTTP都标记为不安全。</li>
<li>SSL可以提高搜索引擎排名。</li>
</ol>
<h4 id="使用Cloudflare添加SSL"><a href="#使用Cloudflare添加SSL" class="headerlink" title="使用Cloudflare添加SSL"></a>使用Cloudflare添加SSL</h4><ol>
<li>注册并登陆Cloudflare，填入你的域名，选择免费计划。</li>
<li>在阿里云域名管理处将DNS服务器修改为Cloudflare的DNS。<br><img src="../../images/201802241359_476.png" alt></li>
<li>在Cloudflare中将Crypto设置为flexible<br><img src="../../images/201802241401_562.png" alt></li>
<li>设置页面规则<br><img src="../../images/201802241404_610.png" alt><br><img src="../../images/201802241404_992.png" alt></li>
<li>稍等5-30分钟即可生效</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux服务部署之LNMP搭建(编译安装)]]></title>
      <url>/20180109/Linux%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E4%B9%8BLNMP%E6%90%AD%E5%BB%BA.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>LNMP算是比较容易的一个服务了，没有使用YUM直接安装还是比较痛苦的。<br><a id="more"></a></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="AliSQL"><a href="#AliSQL" class="headerlink" title="AliSQL"></a>AliSQL</h3><ol>
<li>安装编译源码所需库和工具<pre><code class="bash">yum install gcc gcc-c++ ncurses-devel perl 
</code></pre>
</li>
</ol>
<p>还需要安装cmake和bison，因为已经自带了，所以不详述，详见参考文档</p>
<ol start="2">
<li><p>增加mysql组和用户</p>
<pre><code class="bash">groupadd mysql 
useradd -r -g mysql mysql 
</code></pre>
</li>
<li><p>建立安装目录和数据文件目录</p>
<pre><code class="bash">mkdir –p /usr/local/mysql 
mkdir -p /data/mysqldb 
</code></pre>
</li>
<li><p>下载解压并编译源码</p>
<pre><code class="bash">git clone https://github.com/alibaba/AliSQL
unzip AliSQL-master.zip
cd AliSQL-master
cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DMYSQL_DATADIR=/data/mysqldb -DMYSQL_TCP_PORT=3306 -DENABLE_DOWNLOADS=1 
make
make install
</code></pre>
</li>
<li><p>修改相关目录属主和数组</p>
<pre><code class="bash">chown -R mysql:mysql /usr/local/mysql
chown -R mysql:mysql /data/mysqldb
</code></pre>
</li>
<li><p>初始化AliSQL数据库</p>
<pre><code class="bash">cd /usr/local/mysql
scripts/mysql_install_db –user=mysql –datadir=/data/mysqldb 
</code></pre>
</li>
</ol>
<p>成功初始化后，提示以下信息，记下来以备后用。</p>
<pre><code class="bash">To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system

PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
To do so, start the server, then issue the following commands:

  ./bin/mysqladmin -u root password &#39;new-password&#39;
  ./bin/mysqladmin -u root -h localhost.localdomain password &#39;new-password&#39;

Alternatively you can run:

  ./bin/mysql_secure_installation

which will also give you the option of removing the test
databases and anonymous user created by default.  This is
strongly recommended for production servers.

See the manual for more instructions.

You can start the MySQL daemon with:

  cd . ; ./bin/mysqld_safe &amp;

You can test the MySQL daemon with mysql-test-run.pl

  cd mysql-test ; perl mysql-test-run.pl

Please report any problems at http://bugs.mysql.com/

The latest information about MySQL is available on the web at

  http://www.mysql.com

Support MySQL by buying support/licenses at http://shop.mysql.com

New default config file was created as ./my.cnf and
will be used by default by the server when you start it.
You may edit this file to change server settings
</code></pre>
<ol start="7">
<li>复制AliSQL服务启动配置文件、脚本，并加入PATH<br><code>`</code>bash<br>cp /usr/local/mysql/support-files/my-default.cnf /etc/my.cnf<br>cp support-files/mysql.server /etc/init.d/mysqld<br>vim /etc/profile </li>
</ol>
<p>#加入这行<br>PATH=/usr/local/mysql/bin:/usr/local/mysql/lib:$PATH </p>
<p>export PATH<br>source/etc/profile </p>
<pre><code>
8. 启动AliSQL服务并加入开机自启
```bash
service mysqld start 
chkconfig –level 35 mysqld on 
</code></pre><ol start="9">
<li>检查是否已启动<pre><code class="bash">netstat -tulnp | grep 3306 
mysql -u root -p
</code></pre>
</li>
</ol>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ol>
<li><p>下载包并解压</p>
<pre><code class="bash">tar zxvf nginx-1.12.2.tar.gz
cd ./nginx-1.12.2
</code></pre>
</li>
<li><p>编译安装</p>
<pre><code class="bash">./configure  --prefix=/usr/local/nginx  --sbin-path=/usr/local/nginx/sbin/nginx --conf-path=/usr/local/nginx/conf/nginx.conf --error-log-path=/var/log/nginx/error.log  --http-log-path=/var/log/nginx/access.log  --pid-path=/var/run/nginx/nginx.pid --lock-path=/var/lock/nginx.lock  --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --http-client-body-temp-path=/var/tmp/nginx/client/ --http-proxy-temp-path=/var/tmp/nginx/proxy/ --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi --http-scgi-temp-path=/var/tmp/nginx/scgi --with-pcre
</code></pre>
<p>可能需要依赖文件如下</p>
<pre><code class="bash">yum install gcc gcc-c++ automake pcre pcre-devel zlip zlib-devel openssl openssl-devel 
</code></pre>
<p>安装完毕后有相关的提示信息，马克以备后用</p>
<pre><code class="bash">Configuration summary
+ using system PCRE library
+ using system OpenSSL library
+ using system zlib library

nginx path prefix: &quot;/usr/local/nginx&quot;
nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;
nginx modules path: &quot;/usr/local/nginx/modules&quot;
nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;
nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;
nginx pid file: &quot;/var/run/nginx/nginx.pid&quot;
nginx error log file: &quot;/var/log/nginx/error.log&quot;
nginx http access log file: &quot;/var/log/nginx/access.log&quot;
nginx http client request body temporary files: &quot;/var/tmp/nginx/client/&quot;
nginx http proxy temporary files: &quot;/var/tmp/nginx/proxy/&quot;
nginx http fastcgi temporary files: &quot;/var/tmp/nginx/fcgi/&quot;
nginx http uwsgi temporary files: &quot;/var/tmp/nginx/uwsgi&quot;
nginx http scgi temporary files: &quot;/var/tmp/nginx/scgi&quot;
</code></pre>
</li>
<li><p>修改监听端口<br><code>`</code>bash<br>vim /usr/local/nginx/conf/nginx.conf</p>
</li>
</ol>
<h1 id="listen把80改为8090，以防冲突"><a href="#listen把80改为8090，以防冲突" class="headerlink" title="listen把80改为8090，以防冲突"></a>listen把80改为8090，以防冲突</h1><p>server {<br>    listen       8090;</p>
<pre><code>
4. 启动nginx
```bash
ln -sf /usr/local/nginx/sbin/nginx  /usr/sbin
# 启动
nginx
# 重载配置
nginx -s reload
# 停止
nginx -s stop
</code></pre><p>执行错误有：</p>
<ul>
<li><code>nginx: [emerg] getpwnam(&quot;nginx&quot;) failed</code>：表示没有nginx用户（<code>useradd -s /sbin/nologin -M nginx</code>)</li>
<li><code>nginx: [emerg] mkdir() &quot;/var/tmp/nginx/client/&quot; failed (2: No such file or directory)</code>：表示没有该目录(<code>mkdir -p</code>)</li>
</ul>
<ol start="5">
<li><p>验证nginx是否开启、端口是否监听</p>
<pre><code class="bash">ps -ef | grep nginx
netstat -antl | grep 8090
</code></pre>
<p>直接访问<code>ip:8090</code>显示<code>Welcome to Nginx</code>表明安装成功</p>
</li>
<li><p>更复杂的配置详看参考文档2</p>
</li>
</ol>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ol>
<li><p>下载PHP压缩包解压并进入目录</p>
</li>
<li><p>编译安装<br>为了整合mysql 记得要带上<code>--with-mysql=YOUR_MYSQL_PATH</code></p>
<pre><code class="bash">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-fpm --with-fpm-user=php-fpm --with-fpm-group=php-fpm --with-mysql=/usr/local/mysql --with-libxml-dir --enable-soap --enable-gd-native-ttf --enable-ftp --enable-mbstring --enable-exif --disable-ipv6 --with-curl --with-openssl
</code></pre>
<p>同样可能需要安装依赖文件，见机行事</p>
<pre><code class="bash">yum -y install libxml2 libxml2-devel curl curl-devel 
</code></pre>
<p>安装后有提示信息，同样马克</p>
<pre><code class="bash">You may want to add: /usr/local/php/lib/php to your php.ini include_path
/usr/local/src/php-5.6.0/build/shtool install -c ext/phar/phar.phar /usr/local/php/bin
ln -s -f /usr/local/php/bin/phar.phar /usr/local/php/bin/phar
Installing PDO headers:  /usr/local/php/include/php/ext/pdo/
</code></pre>
</li>
<li><p>修改配置文件</p>
<pre><code class="bash">cp php-5.6.0/php.ini-production /usr/local/php/etc/php.ini
cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
</code></pre>
<p>使用<code>/usr/local/php/sbin/php-fpm -t</code>测试是否成功，不成功则</p>
<pre><code class="bash">vim /usr/local/php/etc/php-fpm.conf
# 将其中user和group改成系统用户
</code></pre>
</li>
<li>启用php-fpm<br><code>`</code>bash<br>service php-fpm start</li>
</ol>
<p>#开机启动和检测是否已启动<br>chkconfig php-fpm on<br>ps aux | grep php-fpm<br>netstat -ant |grep 9000</p>
<pre><code>
5. 加入环境变量
```bash
vim /etc/profile

##添加以下两行
PATH=/usr/local/webserver/php/bin:$PATH
export PATH

source /etc/profile
# 写个代码检验一下
php test.php
</code></pre><h3 id="更改Nginx配置"><a href="#更改Nginx配置" class="headerlink" title="更改Nginx配置"></a>更改Nginx配置</h3><p>整合成LNMP，.conf的详细参数配置看参考文档2</p>
<pre><code class="bash">&gt; /usr/local/nginx/conf/nginx.conf
vim /usr/local/nginx/conf/nginx.conf


user nobody nobody;
worker_processes 2;
error_log /usr/local/nginx/logs/nginx_error.log crit;
pid /usr/local/nginx/logs/nginx.pid;
worker_rlimit_nofile 51200;

events
{
    use epoll;
    worker_connections 6000;
}

http
{
    include mime.types;
    default_type application/octet-stream;
    server_names_hash_bucket_size 3526;
    server_names_hash_max_size 4096;
    log_format combined_realip &#39;$remote_addr $http_x_forwarded_for [$time_local]&#39;
    &#39;$host &quot;$request_uri&quot; $status&#39;
    &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&#39;;
    sendfile on;
    tcp_nopush on;
    keepalive_timeout 30;
    client_header_timeout 3m;
    client_body_timeout 3m;
    send_timeout 3m;
    connection_pool_size 256;
    client_header_buffer_size 1k;
    large_client_header_buffers 8 4k;
    request_pool_size 4k;
    output_buffers 4 32k;
    postpone_output 1460;
    client_max_body_size 10m;
    client_body_buffer_size 256k;
    client_body_temp_path /usr/local/nginx/client_body_temp;
    proxy_temp_path /usr/local/nginx/proxy_temp;
    fastcgi_temp_path /usr/local/nginx/fastcgi_temp;
    fastcgi_intercept_errors on;
    tcp_nodelay on;
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 8k;
    gzip_comp_level 5;
    gzip_http_version 1.1;
    gzip_types text/plain application/x-javascript text/css text/htm application/xml;

    server
    {
        # 端口
        listen 80;
        server_name localhost;
        index index.html index.htm index.php;
        # 网站根地址
        root /usr/local/nginx/html;

        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html$fastcgi_script_name;
        }
    }
}
</code></pre>
<p>在<code>/usr/local/nginx/html</code>创建<code>test.php</code>，内容如下</p>
<pre><code class="php">&lt;?php
    echo phpinfo();
?&gt;
</code></pre>
<p>查看<code>http://ip/test.php</code>是否出现phpinfo，并且在里面查看mysql是否正确配置。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://blog.csdn.net/tanyhuan/article/details/64942722" target="_blank" rel="noopener">AliSQL 安装</a></li>
<li><a href="https://www.cnblogs.com/zhang-shijie/p/5294162.html" target="_blank" rel="noopener">Nginx 安装</a></li>
<li><a href="http://blog.csdn.net/dyllove98/article/details/41120789" target="_blank" rel="noopener">5分钟搭建 nginx +php</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux LNMP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux服务部署之VSFTP搭建(编译安装)]]></title>
      <url>/20180108/20180108-Linux%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2%E4%B9%8BVSFTP%E6%90%AD%E5%BB%BA.html</url>
      <content type="html"><![CDATA[<h2 id="系统环境和预计目标"><a href="#系统环境和预计目标" class="headerlink" title="系统环境和预计目标"></a>系统环境和预计目标</h2><ol>
<li>CentOS 7.4</li>
<li>ftp 根目录 :  <code>/data/ftp</code></li>
<li>ftp 配置文件目录： <code>/etc/vsftpd</code></li>
<li>ftp 虚拟用户权限配置文件目录： <code>/etc/vsftpd/vuser_config</code></li>
</ol>
<a id="more"></a>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol>
<li><p>安装vsftpd和db_load加密工具</p>
<pre><code class="bash">#修改配置文件
sed -i &#39;s/SELINUX=enforcing/SELINUX=disabled/&#39; /etc/selinux/config 
#临时关闭
setenforce 0  
#关闭防火墙
systemctl stop firewalld.service 
yum install vsftpd -y
</code></pre>
</li>
<li><p>创建本地用户用于映射虚拟用户</p>
<pre><code class="bash"># 创建ftp用户目录
mkdir -p /data/ftp
# 创建用户
useradd -d /data/ftp vuser -s /sbin/nologin
# 更改权限和主组权限
chmod 755 /data/ftp
chown vuser.root /data/ftp
</code></pre>
</li>
<li><p>创建虚拟用户文件<br><code>`</code>bash<br>vim /etc/vsftpd/vuser-list</p>
</li>
</ol>
<h1 id="用户名一行，密码一行"><a href="#用户名一行，密码一行" class="headerlink" title="用户名一行，密码一行"></a>用户名一行，密码一行</h1><p>li<br>123123123<br>li1<br>123123123</p>
<pre><code>
4. 加密用户密码文件生成数据库文件
```bash
cd /etc/vsftpd
db_load -T -t hash -f ./vuser-list ./vuser-list.db
chmod 600 vuser-list.db
</code></pre><ol start="5">
<li>创建PAM认证文件<br><code>`</code>bash<br>vim /etc/pam.d/vuser.vu</li>
</ol>
<h1 id="PAM认证模块"><a href="#PAM认证模块" class="headerlink" title="PAM认证模块"></a>PAM认证模块</h1><p>#注意64位系统写/lib64这个路径，32位系统要写成/lib<br>auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser-list<br>account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser-list</p>
<pre><code>
6. 修改配置文件
```bash
# 先备份
mv /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf-bak
vim /etc/vsftpd/vsftpd.conf


#是否开启匿名登陆
anonymous_enable=YES

local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
#登陆日志地址
xferlog_file=/var/log/xferlog
xferlog_std_format=YES

listen=YES
listen_ipv6=NO

#修改ftp默认目录到/data/ftp下面
chroot_local_user=YES
#使用户不能离开主目录
chroot_list_enable=YES
#设定支持ASCII
ascii_upload_enable=YES
ascii_download_enable=YES
local_root=/data/ftp
anon_root=/data/ftp

#pam认证文件
pam_service_name=vuser.vu

#虚拟用户权限配置目录
user_config_dir=/etc/vsftpd/vuser_config
userlist_enable=YES
tcp_wrappers=YES

allow_writeable_chroot=YES
one_process_model=NO
#开启虚拟用户
guest_enable=YES
guest_username=vuser
</code></pre><ol start="7">
<li>创建虚拟用户权限的配置文件<br><code>`</code>bash<br>mkdir /etc/vsftpd/vuser_config<br>cd /etc/vsftpd/vuser_config</li>
</ol>
<p>mkdir -p /data/ftp/li<br>mkdir -p /data/ftp/li1<br>chmod 777 /data/ftp/li<br>chmod 777 /data/ftp/li1</p>
<p>vim li </p>
<h1 id="有所有权限"><a href="#有所有权限" class="headerlink" title="[有所有权限]"></a>[有所有权限]</h1><p>#设置登录后禁锢的目录<br>local_root=/data/ftp/li</p>
<p>#开放写权限<br>write_enable=yes</p>
<p>#开放下载权限<br>anon_world_readable_only=no</p>
<p>#开放上传权限<br>anon_upload_enable=yes</p>
<p>#开放创建目录的权限<br>anon_mkdir_write_enable=yes</p>
<p>#开放删除和重命名的权限<br>anon_other_write_enable=yes</p>
<p>vim li1</p>
<h1 id="只有上传下载的权限"><a href="#只有上传下载的权限" class="headerlink" title="[只有上传下载的权限]"></a>[只有上传下载的权限]</h1><p>local_root=/data/ftp/li1<br>anon_upload_enable=yes<br>anon_world_readable_only=no</p>
<pre><code>
8. 更改虚拟用户目录权限，目的是不让匿名用户进行访问
```bash
chmod 700 li
chmod 700 li1
</code></pre><ol start="9">
<li><p>设置ftp自启动<code>systemctl enable vsftpd</code>，打开ftp服务 <code>systemctl start vsftpd</code>，为了验证是否启动，使用<code>systemctl status vsftpd.service</code>查看是否已开启。</p>
</li>
<li><p>使用xftp或ftp命令进行测试，使用li时可以进行任何操作，包括新建文件夹；使用li1时只能上传和下载，不能新建文件夹，测试有问题则对6和7进行排错。</p>
</li>
</ol>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol>
<li>useradd可能会出现<code>useradd: warning: the home directory already exists.</code>，是因为默认配置home目录在 <code>/home</code>，导致冲突。第二是因为没有skel目录。没有太大的关系，用户已经成功创建。如果十分纠结这点可以对其建自己的home目录，手动拷贝skel相关文件到home目录下。</li>
<li><code>550 OOPS: Permission Denied</code>上传失败或创建文件夹失败，可能是selinux的问题。</li>
</ol>
<ul>
<li>关闭selinux：修改 <code>/etc/selinux/config</code>文件中的 <code>SELINUX=&quot;&quot;</code> 为  <code>disabled</code>，使用 <code>setenforce 0</code>重启，使用 <code>getenforce</code>查看是否成功disable掉。值得注意的是需要关闭ftp窗口，重新链接才能生效。</li>
<li>不关闭selinux：修改selinux配置，详见参考文档2。</li>
</ul>
<ol start="3">
<li><code>226 Transfer done (but failed to open directory)</code>，selinux和防火墙的问题，重新配置一下第一步。</li>
<li><code>500 OOPS vsftpd: refusing to run with writable root inside chroot()</code>，配置文件中加入 <code>allow_writeable_chroot=YES</code>,创建相应文件<pre><code>touch /etc/vsftpd/chroot_list
chmod 644 /etc/vsftpd/chroot_list
</code></pre></li>
<li>在操作过程中遇到 <code>No such file or directory</code>，表示不存在目录，可使用 <code>mkdir -p</code>进行创建。</li>
<li>遇到该问题时候，查看6修改配置处是否有错误，拼写错误也可能导致该错误。<br><code>`</code>bash<br>[root@localhost vsftpd]# systemctl status vsftpd.service<br>● vsftpd.service - Vsftpd ftp daemon<br>Loaded: loaded (/usr/lib/systemd/system/vsftpd.service; enabled; vendor preset: disabled)<br>Active: failed (Result: exit-code) since Mon 2018-01-08 16:22:04 CST; 3min 24s ago<br>Process: 1202 ExecStart=/usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf (code=exited, status=2)</li>
</ol>
<p>Jan 08 16:22:04 localhost.localdomain systemd[1]: Starting Vsftpd ftp daemon…<br>Jan 08 16:22:04 localhost.localdomain systemd[1]: vsftpd.service: control process exited, code=exited status=2<br>Jan 08 16:22:04 localhost.localdomain systemd[1]: Failed to start Vsftpd ftp daemon.<br>Jan 08 16:22:04 localhost.localdomain systemd[1]: Unit vsftpd.service entered failed state.<br>Jan 08 16:22:04 localhost.localdomain systemd[1]: vsftpd.service failed.<br><code>`</code></p>
<ol start="7">
<li>出现pam验证通过，但是不能连接的可能是因为配置第七点有一个大坑，是每一行包括文件末尾不能有空格，命令行下会报 <code>500 OOPS: bad bool value in config file for: anon_world_readable_only</code></li>
<li><code>550 Create directory operation failed.</code>：目录权限没给写权限，使用 <code>chmod 777 /data/ftp/li</code>即可</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>ftp最好使用命令行，这样返回错误码和错误信息容易排错。</li>
<li>多看日志判断信息。包括 <code>tail -f /var/log/secure</code> 和 <code>systemctl status vsftpd</code></li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://blog.csdn.net/aerchi/article/details/78042443" target="_blank" rel="noopener">centos7 安装vsftpd和配置虚拟用户访问及权限分配</a></li>
<li><a href="http://blog.163.com/haizhifeng6@126/blog/static/45615427201489111836632/" target="_blank" rel="noopener">selinux配置 VSFTP不能上传</a></li>
<li><a href="http://man.linuxde.net/systemctl" target="_blank" rel="noopener">systemctl命令</a></li>
<li><a href="http://www.linuxidc.com/Linux/2015-12/126357.htm" target="_blank" rel="noopener">如何在命令行中使用 ftp 命令上传和下载文件</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JQUERY实现SELECT框三级联动]]></title>
      <url>/20171219/JQUERY%E5%AE%9E%E7%8E%B0SELECT%E6%A1%86%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html</url>
      <content type="html"><![CDATA[<p>最近做了一个外包项目，其中写了一个模块是select框国家-省-市的三级联动，其中操作用到了JQuery，数据文件是引入了JSON，没有进行后端交互。如果用到后端交互的话，每次change的函数改成ajax请求即可。因为项目代码的保密，没有写得特别清楚，但结构应该也比较清晰了。</p>
<a id="more"></a>
<h2 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h2><p>由于数据是用脚本分几个文档处理出来的，所以JSON文件的格式是形如以下形式，分为了国家-省.json，省-市.json，一般情况下整合在一起会比较合适，操作起来也比较方便。</p>
<pre><code class="JSON">[
{
    &quot;country&quot;:&quot;China&quot;,
    &quot;provinces&quot;:[
        &quot;Guangdong&quot;,
        &quot;Beijing&quot;,
        &quot;Shanghai&quot;
    ]
},
{...}
]
</code></pre>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><pre><code class="html">&lt;div class=&quot;select-list&quot;&gt;
    &lt;select name=&quot;country&quot;&gt;&lt;/select&gt;
    &lt;select name=&quot;provinces&quot;&gt;&lt;/select&gt;
    &lt;select name=&quot;cities&quot;&gt;&lt;/select&gt;
&lt;/div&gt;
</code></pre>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><pre><code class="Javascript">var countrySel = $(&#39;select[name=country]&#39;);
var provincesSel = $(&#39;select[name=provinces]&#39;);
var citiesSel = $(&#39;select[name=cities]&#39;);

var changePro = function () {
    var optionData = &quot;&quot;;
    // 遍历JSON
    $.each(country2pro, function (idx, reg) {
        optionData += &quot;&lt;option value=&#39;&quot; + reg.country + &quot;&#39;&gt;&quot; + reg.country + &quot;&lt;/option&gt;&quot;;
    });
    countrySel.empty();
    countrySel.html(optionData);
    changePro();
};

var changePro = function () {
    var optionData = &quot;&quot;;
    var idx = countrySel.get(0).selectedIndex;
    country2pro[idx].provinces.sort();
    country2pro[idx].provinces.forEach(function (item) {
        optionData += &quot;&lt;option value=&#39;&quot;+item+&quot;&#39;&gt;&quot; + item + &quot;&lt;/option&gt;&quot;;
    });
    provincesSel.empty();
    provincesSel.html(optionData);
    changeCity();
};

var changeCity = function () {
    var optionData = &quot;&quot;;
    // 获取province值
    var province = provincesSel.val();
    $.each(prov2cities, function (idx, opt) {
       if (opt.province == province) {
           opt.cities.sort();
           opt.cities.forEach(function (item) {
               optionData += &quot;&lt;option value=&#39;&quot;+item+&quot;&#39;&gt;&quot; + item + &quot;&lt;/option&gt;&quot;;
           });
           return false;
       }
    });
    citiesSel.empty();
    citiesSel.html(optionData);
};

//文档加载时执行时事件
window.onload = function () {
    changeRegion();
}

//select框change事件
regionSel.change(function () {
    changePro();
});

countrySel.change(function () {
    changeCity();
});
</code></pre>
<h2 id="一些小知识点"><a href="#一些小知识点" class="headerlink" title="一些小知识点"></a>一些小知识点</h2><ul>
<li>$.each遍历JSON的时候通过return进行类似for循环的break和continue</li>
<li>select框change的时候必须要清除框内的值</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JQUERY </tag>
            
            <tag> Javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github Pages搭建]]></title>
      <url>/20171216/Github%20Pages%E6%90%AD%E5%BB%BA.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近正在重新系统地学习一遍Linux，自己也经常在有道里面做做笔记。如今拥抱开源、知识分享也是一种趋势，搭建一个博客写写自己学到的知识、整理一下笔记也是挺不错的。于是今晚用一个小时利用Github Pages配置搭建好了Yilia主题的博客，简单记录一下操作和一些坑，希望能给别人一些帮助。</p>
<a id="more"></a>
<h2 id="Github操作"><a href="#Github操作" class="headerlink" title="Github操作"></a>Github操作</h2><ul>
<li>创建仓库，仓库名为 githubname.github.io</li>
<li>在仓库Setttings#Github Pages-&gt;choose a theme，完成配置</li>
</ul>
<h2 id="HEXO操作"><a href="#HEXO操作" class="headerlink" title="HEXO操作"></a>HEXO操作</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li>install Node.js, git</li>
<li>git需要进行配置SSH，链接到你的github。使用<code>git config --list</code>查看是否已配置成功</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>进行hexo配置<pre><code>  npm install -g hexo-cli
  cd create_a_hexo_path
  hexo init
  npm install
  hexo server
</code></pre>  打开<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>看是否安装成功</li>
<li>打开hexo文件夹下的_config.yml，这就是hexo的相关配置。找到deploy进行修改<pre><code>  deploy: 
    type: git
    repo: git@github.com:MyGithub/MyGithub.github.io.git
    branch: master
  // warning:修改MyGithub为自己的账户名;在yml文件中，:后面必须要有空格
</code></pre></li>
</ul>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><ul>
<li>在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">各种themes</a>下载喜欢的主题到./themes下</li>
<li>需要更新主题时可以到主题文件夹下进行<code>git pull</code></li>
<li>在_config.yml 更改theme<pre><code>  # Extensions
  ## Plugins: http://hexo.io/plugins/
  ## Themes: http://hexo.io/themes/
  theme: next
</code></pre></li>
<li>本地运行验证是否可用<code>hexo s --debug</code></li>
</ul>
<h3 id="yilla配置"><a href="#yilla配置" class="headerlink" title="yilla配置"></a>yilla配置</h3><ul>
<li><a href="http://www.jianshu.com/p/f389ad8c49bd" target="_blank" rel="noopener">GithubPages+Hexo博客主题Yilia</a></li>
<li>此处建议大家挑选比较热门的主题，对应的帮助文档会比较详细规范。不同的主题配置方法大致相同，一般都是修改_config.yml文件，此处不再赘述具体的配置。</li>
</ul>
<h3 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h3><ul>
<li>每次部署都需要输入三个命令<pre><code class="bash">  hexo clean
  hexo generate   //hexo g
  hexo deploy     //hexo d
</code></pre>
</li>
<li>如果报错，则需要安装插件<code>npm install hexo-deployer-git</code></li>
</ul>
<h3 id="博客文章放置点"><a href="#博客文章放置点" class="headerlink" title="博客文章放置点"></a>博客文章放置点</h3><ul>
<li>在source文件夹下的_post文件夹下放置</li>
</ul>
<h2 id="注册域名与github-pages地址绑定"><a href="#注册域名与github-pages地址绑定" class="headerlink" title="注册域名与github pages地址绑定"></a>注册域名与github pages地址绑定</h2><ul>
<li>待填坑</li>
</ul>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul>
<li><a href="https://cczeng.github.io/2017/05/03/git/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Github-Pages%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E7%BB%86%E6%95%B0%E4%B8%80%E8%B7%AF%E7%9A%84%E5%9D%91/" target="_blank" rel="noopener">我是如何利用Github Pages搭建起我的博客，细数一路的坑客</a></li>
<li><a href="http://barrysite.me/2017/05/07/Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">Github+Hexo+NEXT主题+域名绑定 博客搭建全记录</a></li>
<li><a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="noopener">HEXO+Github,搭建属于自己的博客
</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017蓝盾杯bdctf热身题]]></title>
      <url>/20171013/2017%E8%93%9D%E7%9B%BE%E6%9D%AFbdctf%E7%83%AD%E8%BA%AB%E9%A2%98.html</url>
      <content type="html"><![CDATA[<p>又水了一场比赛，蓝盾这次系统漏洞百出，口碑炸裂了……放出我的一些WP<br><a id="more"></a></p>
<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p>WEB题目没记录，所以只写思路</p>
<h3 id="Forbidden"><a href="#Forbidden" class="headerlink" title="Forbidden"></a>Forbidden</h3><p>提示所在地要是在台湾，目测修改HTTP头，然而flag直接在页面了。。</p>
<h3 id="False"><a href="#False" class="headerlink" title="False"></a>False</h3><p>提示两个参数需要不同且sha1值相同。PHP的sha1函数对数组无用，利用数组绕过。</p>
<h3 id="mdzz"><a href="#mdzz" class="headerlink" title="mdzz"></a>mdzz</h3><p>平台太卡，做不了</p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="base64全家桶"><a href="#base64全家桶" class="headerlink" title="base64全家桶"></a>base64全家桶</h3><p>用base64 base32 base16依次解即可</p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="虚拟镜像"><a href="#虚拟镜像" class="headerlink" title="虚拟镜像"></a>虚拟镜像</h3><p>用VMware挂载磁盘，目测NTFS隐藏，利用labs看出来有文件隐藏。<br>执行notepad flag.txt:flaghidden.txt</p>
<h2 id="Stega"><a href="#Stega" class="headerlink" title="Stega"></a>Stega</h2><h3 id="愤怒的小鸟"><a href="#愤怒的小鸟" class="headerlink" title="愤怒的小鸟"></a>愤怒的小鸟</h3><p>提示使用outguess，直接用outguess即可</p>
<h3 id="空白的图片"><a href="#空白的图片" class="headerlink" title="空白的图片"></a>空白的图片</h3><p>stegsolve看有个key{},为压缩包密码，解压出gif，给gif添加头GIF8，用stegsolve查看Analyse-Frame Browser，逐帧查看可得</p>
<h3 id="他是什么人"><a href="#他是什么人" class="headerlink" title="他是什么人"></a>他是什么人</h3><p>foremost就行</p>
<h2 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h2><h3 id="求最大循环次数"><a href="#求最大循环次数" class="headerlink" title="求最大循环次数"></a>求最大循环次数</h3><pre><code class="python">def cnt(n):
   cnt = 1
   while(n != 1):
       if n%2 == 0:
           n = int(n/2)
       else:
           n = 3*n + 1
       cnt += 1
       # print(n)
   return cnt
m = 0
for i in range(900, 1001):
   c = cnt(i)
   m = c if c&gt;m else m

print(m)
</code></pre>
<h3 id="求素数"><a href="#求素数" class="headerlink" title="求素数"></a>求素数</h3><pre><code class="c++">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
int main() {
    int start = 367;
    int diff = 186;
    // 判断输入的数值，是否是素数
    int isPrime(int digit) {
        int sq = sqrt(digit);
        for (int i = 2; i &lt;= sq; i++) {
            if (digit % i == 0) {
                return 0;
            }
        }
        return 1;
    }
    int count = 0;  //存储找到的素数的个数
    int current = start; //存储等差数列的当前值
    while (1) {
        if (isPrime(current)) {
            count += 1;
            if(count == 151) break;
        }
        current += diff;
    }
    printf(&quot;第154个素数是: %d&quot;, current);
}
</code></pre>
<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="http://pan.baidu.com/s/1i5lCHUl" target="_blank" rel="noopener">http://pan.baidu.com/s/1i5lCHUl</a> 密码：ob08</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[you_need_python_by_sunnyelf题解]]></title>
      <url>/20170823/%5BCTF%5Dyou_need_python_by_sunnyelf.html</url>
      <content type="html"><![CDATA[<p>今天碰到了一个比较有意思的综合题目，记下来给大家看看。<br><a id="more"></a><br>题目和脚本地址：you_need_python_by_sunnyelf<br>解压zip有两个文件，一个是flag.py，一个是key_is_here_but_do_you_know_rfc4042。<br>首先第一步看提示rfc4042的文件，查询可得，它是utf9或者是utf18的编码。在github上找到utf9解码的库，代码如下：</p>
<pre><code class="python">import utf9

dt = &#39;&#39;
with open(&#39;key_is_here_but_do_you_know_rfc4042&#39;, &#39;r&#39;) as f:
    t = f.read()
    dt = utf9.utf9decode(t)
print dt
</code></pre>
<p>解出为</p>
<pre><code>_____*((__//__+___+______-____%____)**((___%(___-_))+________+(___%___+_____+_______%__+______-(______//(_____%___)))))+__*(((________/__)+___%__+_______-(________//____))**(_*(_____+_____)+_______+_________%___))+________*(((_________//__+________%__)+(_______-_))**((___+_______)+_________-(______//__)))+_______*((___+_________-(______//___-_______%__%_))**(_____+_____+_____))+__*(__+_________-(___//___-_________%_____%__))**(_________-____+_______)+(___+_______)**(________%___%__+_____+______)+(_____-__)*((____//____-_____%____%_)+_________)**(_____-(_______//_______+_________%___)+______)+(_____+(_________%_______)*__+_)**_________+_______*(((_________%_______)*__+_______-(________//________))**_______)+(________/__)*(((____-_+_______)*(______+____))**___)+___*((__+_________-_)**_____)+___*(((___+_______-______/___+__-_________%_____%__)*(___-_+________/__+_________%_____))**__)+(_//_)*(((________%___%__+_____+_____)%______)+_______-_)**___+_____*((______/(_____%___))+_______)*((_________%_______)*__+_____+_)+___//___+_________+_________/___
</code></pre><p>刚开始还以为是类似brainfuck之类的东西，但是观察到有括号和运算符，于是猜测是不是下划线的个数代表数字，验证了一下结果是正确的。运算之后得到了一串数字，应该为key。</p>
<pre><code class="python"># 似乎不能直接u&#39;_&#39;会验证不出来，因此用dt[0]代替
ul = dt[0]
cnt = 0
ns = &#39;&#39;
for i in dt:
    if i is ul:
        cnt += 1
    else:
        if cnt != 0:
            ns += str(cnt)
            cnt = 0
            ns += i
        else:
            ns += i
# add
ns += str(cnt)
ns = ns.replace(&#39;//&#39;, &#39;/&#39;)
print ns
key = eval(ns)
print key
# 5287002131074331513 key
</code></pre>
<p>第二步是难点，看marshal.loads()应该处理之后的是编译后的二进制流，查阅资料 <a href="http://www.cnblogs.com/rainduck/p/3524557.html" target="_blank" rel="noopener">http://www.cnblogs.com/rainduck/p/3524557.html</a> 找到反编译的方法，因此用uncompyle2是最好不过的了，反编译得出py文件。</p>
<pre><code class="python">import marshal, zlib, base64

bs = marshal.loads(zlib.decompress(base64.b64decode(&#39;eJxtVP9r21YQvyd/ieWm66Cd03QM1B8C3pggUuzYCSWstHSFQijyoJBhhGq9OXJl2ZFeqAMOK6Q/94f9Ofvn1s+d7Lgtk/3O997du/vc584a0eqpYP2GVfwDEeOrKCU6g2LRRyiK4oooFsVVUSqkqxTX6J1F+SfSNYrrdKPorC76luhbpOEGCZNFZw2KG3Rmk26QtuXi3xTb7ND6/aVu0g2RuvhEcZNut5lAGbTvAFbyH57TkYLKy8J6xpDvQxiiiaIlcdqJxVcHbXY6bXNlZgviPCrO0+StqfKd88gzNh/qRZyMdWHE29TZZvIkG7eZFRGGRcBmsXJaUoKCQ9fWKHwSqNeKFnsM5PnwJ7q2aKk4AFhcWtQCh+ChB5+Lu/RmyYUxmtOEYxas7i/2iuR7Ti14OEOSmU0RADd4+dQzbM1FJhukAUeQ+kZROuLyioagrau76kc1slY1NNaY/y3LAxDQBrAICJisV2hMdF2lxQcyFuMoqcX3+TCl6xotqzSpkqmxYVmjXVjAXiwBsEfBrd1VvTvLCj2EXRnhoryAKdpxcIgJcowUB68yAx/tlCAuPHqDuZo0CN3CUGHwkPhGMA7aXMfphjbmQLhLhJcHa0a+mpgB191c1U1lnHJQbgkHx+WGxeJbejnpkzSavo2jkxZ7i725npGAaTc8FXmUjbUETHUmkxXN5zqL5WiWxwE7Bc11yyYzNJpN02jerq+DzNNodfxOX8kE4FcmYKscDdYD1oPGGucXYNmgs1F+NTf3GOt3Mg7b+NTVruqoQyX1hOEUacKw+AGbP38ZOq9THRXaSbL5pXGQ8bho/Z/lrzQaHxdoCrlev+t6nZ7re57r+57rHXag93Deh37k+vuw9zorO/Qj/B50cAf2oyOsvut3D+ADWxdxfN/1Drqu39mHzvcRswv/Hvz7sHeg9w8Qzy99DzuFwxhPhs6zWTbOI3OZRiaZZcVj5wVwOklx7OwVxR47PR46r/SVM8ulBJic9zku/eqY/MqJxiDj+Gd55wS3f35pbLCzHoEwzKKpDkN5i+TR+1AYCWTo5IV0Z0P9H3phDDd6lMzPdS5bbo9eJGbTsW9nbDqLL1N9Iq+rRxDbll2x67a9Lf27hw5uK1s1rZr6DOPF+FI=&#39;)))

import uncompyle2
with open(&#39;f.py&#39;, &#39;w&#39;) as f:
    uncompyle2.uncompyle(&#39;2.7&#39;, bs, f)
看encrypt函数，加密方法如下：
def encrypt(plain, key):
    keySHA1 = sha1(key)
    intSHA1 = calc(keySHA1)
    r = []
    for i in range(len(plain)):
        r.append(ord(plain[i]) + int(&#39;0x%s&#39; % keySHA1[i % 40], 16) - intSHA1)
        intSHA1 = calc(sha1(plain[:i + 1])[:20] + sha1(str(intSHA1))[:20])

    return &#39;&#39;.join(map(lambda x: str(x), r))
</code></pre>
<p>对key进行sha1加密为16进制串，再处理为10进制串保存到intSHA1；<br>对plain里面的每一位ascii编码与keySHA1的某位进行相加后减去intSHA1，放入r中；<br>intSHA1变化为plain前i位的sha1前二十位与intSHA1的SHA1前二十位相加的十进制值；<br>将r中的元素转化为字符串得到加密后的字符串，因此，该加密方法是前后字符关联的，第n位的加密都与前n-1位有关。<br>了解了加密方法后，接下来尝试用第一步爆出的key爆破，爆破代码如下：</p>
<pre><code class="python">...
if __name__ == &#39;__main__&#39;
    cipherText = &#39;-185-147-211-221-164-217-188-169-205-174-211-225-191-234-148-199-198-253-175-157-222-135-240-229-201-154-178-187-244-183-212-222-164&#39;

    key = &#39;5287002131074331513&#39;
    flag =&#39;&#39;
    for i in range(len(cipherText)/4):
        for j in range(31, 128):   # 一般31-128才是常用字符
            if encrypt(flag+chr(j), key) == cipherText[0:i*4+4]:
                print j,
                flag += chr(j)
                break
    print flag
发现爆破出的都是无意义字符串，猜想是否key有问题，尝试将key转换为16进制、16进制转字符串发现有意义字符串I_4m-k3y
hk = hex(key)[2:]
print hk
kk = &#39;&#39;
for i in range(len(hk)/2):
    kk += chr(int(&#39;0x&#39; + hk[i*2:i*2+2], 16))
print kk
</code></pre>
<p>将key代入爆破代码即可解出flag。</p>
]]></content>
      
        <categories>
            
            <category> CTF </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于我]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="WhoAmI"><a href="#WhoAmI" class="headerlink" title="WhoAmI"></a>WhoAmI</h2><ul>
<li>热爱网络安全的无名小卒，熟悉渗透测试、流量分析</li>
<li>四非本科 18 应届毕业生</li>
<li>CTF 划水队员，获得过一些奖项</li>
<li>Python 爱好者，熟练 Python 的安装和卸载</li>
<li>偶尔玩玩前端，有一些前端的踩坑经历</li>
</ul>
<h2 id="Contact-Me"><a href="#Contact-Me" class="headerlink" title="Contact Me"></a>Contact Me</h2><ul>
<li>Mail: <a href="mailto://leezj9671@gmail.com" target="_blank" rel="noopener">GMail</a></li>
<li>QQ: R000REdPSlRHVVpUUU1aWUdNWVRHT0pUR1laVEk9PT0=</li>
<li>Location: 广东深圳</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[时间轴]]></title>
      <url>/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签云]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
